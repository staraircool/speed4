plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dev.flutter.flutter-gradle-plugin'
}

android {
    namespace "com.pro.speedy"
    compileSdk flutter.compileSdkVersion

    // Force NDK version to match the installed NDK to avoid CXX1104
    ndkVersion "27.3.13750724"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
    }

    defaultConfig {
        applicationId "com.pro.speedy"
        minSdk flutter.minSdkVersion
        targetSdk flutter.targetSdkVersion
        versionCode flutter.versionCode
        versionName flutter.versionName
    }

    signingConfigs {
        release {
            // Try to load from key.properties first
            def keystorePropertiesFile = rootProject.file('android/key.properties')
            if (keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                storeFile rootProject.file('android/' + keystoreProperties.getProperty('storeFile'))
                storePassword keystoreProperties.getProperty('storePassword')
                keyAlias keystoreProperties.getProperty('keyAlias')
                keyPassword keystoreProperties.getProperty('keyPassword')
            } else {
                // Fallback for CI environments
                storeFile rootProject.file('android/keystore.jks')
                storePassword System.getenv('KEYSTORE_PASSWORD') ?: 'Star234'
                keyAlias System.getenv('KEY_ALIAS') ?: 'key'
                keyPassword System.getenv('KEY_PASSWORD') ?: 'Star234'
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}
